/* Copyright (c) 2008 University of Durham, England
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 *
 * * Neither the name of 'SynergySpace' nor the names of its contributors 
 *   may be used to endorse or promote products derived from this software 
 *   without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package synergynet.contentsystem.items;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import synergynet.contentsystem.ContentSystem;
import synergynet.contentsystem.items.implementation.interfaces.IQuadContentItemImplementation;
import synergynet.contentsystem.items.listener.ISizeChangeListener;

public class QuadContentItem extends OrthoContentItem implements IQuadContentItemImplementation, Serializable, Cloneable {
		
	private static final long serialVersionUID = -2782160216250663419L;
		
	protected int width =150;
	protected int height = 100;	
	protected int autoGeneratedWidth = 150;
	protected int autoGeneratedHeight = 100;
	protected boolean autoFit = true;
	protected List<ISizeChangeListener> listeners = new ArrayList<ISizeChangeListener>();
	
	public QuadContentItem(ContentSystem contentSystem, String name) {
		super(contentSystem, name);
	}
	
	public void setAutoFit(boolean b) {
		this.autoFit = b;
	}
		
	public int getWidth() {
		if (autoFit)
			return autoGeneratedWidth;
		return width;
	}

	public void setWidth(int width) {
		
		if (autoFit){
			if (this.autoGeneratedWidth ==width) 
				return;
			this.autoGeneratedWidth = width;
		}
		else{
			if (this.width ==width) 
				return;
			this.width = width;
		}	
		
		((IQuadContentItemImplementation)this.contentItemImplementation).setWidth(width);
		
		for (ISizeChangeListener l: listeners){
			l.changeWidth(width);
		}
	}

	public int getHeight() {
		if (autoFit)
			return autoGeneratedHeight;
		return height;
	}

	public void setHeight(int height) {
		if (autoFit){
			if (this.autoGeneratedHeight == height) 
				return;
			this.autoGeneratedHeight = height;
		}
		else{
			if (this.height ==height) 
				return;
			this.height = height;
		}	
		
		((IQuadContentItemImplementation)this.contentItemImplementation).setHeight(height);
		
		for (ISizeChangeListener l: listeners){
			l.changeHeight(height);
		}
	}
	
	public void addSizeChangeListener(ISizeChangeListener l){
		listeners.add(l);
	}
	
	public void removeSizeChangeListener(ISizeChangeListener l){
		if (listeners.contains(l))
			listeners.remove(l);
	}

	public void setAutoFitSize(boolean isEnabled){
		autoFit = isEnabled;
		((IQuadContentItemImplementation)this.contentItemImplementation).setAutoFitSize(isEnabled);
	}
	
	public boolean isAutoFitSize(){
		return autoFit;
	}
	
	
	@Override
	public Object clone() throws CloneNotSupportedException {
		QuadContentItem clonedItem = (QuadContentItem)super.clone();
		clonedItem.width = width;
		clonedItem.height = height;
		clonedItem.autoGeneratedWidth = autoGeneratedWidth;
		clonedItem.autoGeneratedHeight = autoGeneratedHeight;
		clonedItem.autoFit = autoFit;
		return clonedItem;
		
	}
	/*
	public void setLocation(Location location){
		if(this.getParent() != null){
			Location newLoc = new Location(location.x + this.getWidth()/2, location.y + this.getHeight()/2, 0);
			super.setLocalLocation(newLoc);
		}else{
			super.setLocalLocation(location);
		}
	}
	
	public void setLocation(int x, int y){
		this.setLocation(new Location(x,y,0));
	}
	
	public void setLocation(int x, int y, int z){
		this.setLocation(new Location(x,y,z));
	}
	
	public Location getLocation(){
		if(this.getParent() != null){
			return new Location(this.getLocalLocation().x + this.getWidth()/2, this.getLocalLocation().y + this.getHeight()/2, 0);

		}else{
			return super.getLocalLocation();
		}		
	}
	*/
}
